generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model customer {
  id                    Int                      @id @default(autoincrement())
  address               String                   @db.VarChar(100)
  neighborhood          String?                  @db.VarChar(50)
  route_order           Int
  tape_preference       customer_tape_preference @default(NORMAL)
  is_contactable        Int                      @db.TinyInt
  name                  String?                  @db.VarChar(50)
  cellphone             String?                  @db.VarChar(11)
  update_at             DateTime                 @default(now()) @db.Timestamp(0)
  delete_at             DateTime?                @db.Timestamp(0)
  route_id              Int
  route                 route                    @relation(fields: [route_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ROU_CUS")
  note                  note[]
  order                 order[]
  sale                  sale[]
  transaction_container transaction_container[]
  transaction_payment   transaction_payment[]

  @@index([route_id], map: "FK_ROU_CUS_idx")
}

model distribution {
  id                   Int                  @id @default(autoincrement())
  date                 DateTime             @db.Date
  load_up              Int
  broken_containers    Int
  update_at            DateTime             @default(now()) @db.Timestamp(0)
  status               distribution_status? @default(PREORDER)
  delete_at            DateTime?            @db.Timestamp(0)
  route_id             Int
  product_inventory_id Int
  product_inventory    product_inventory    @relation(fields: [product_inventory_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_PRO_DIS")
  route                route                @relation(fields: [route_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ROU_DIS")
  distribution_user    distribution_user[]
  expense              expense[]
  note                 note[]
  order                order[]
  sale                 sale[]

  @@index([product_inventory_id], map: "FK_PRO_DIS_idx")
  @@index([route_id], map: "FK_ROU_DIS_idx")
}

model distribution_user {
  user_id         Int
  distribution_id Int
  distribution    distribution @relation(fields: [distribution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_DIS_DIS_US")
  user            user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_USE_DIS_US")

  @@id([user_id, distribution_id])
  @@index([distribution_id], map: "FK_DIS_DIS_US_idx")
}

model expense {
  id                  Int              @id @default(autoincrement())
  value               Int
  date                DateTime         @db.Date
  description         String?          @db.VarChar(200)
  update_at           DateTime         @default(now()) @db.Timestamp(0)
  delete_at           DateTime?        @db.Timestamp(0)
  distribution_id     Int
  expense_category_id Int
  distribution        distribution     @relation(fields: [distribution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_DIS_EXP")
  expense_category    expense_category @relation(fields: [expense_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_EXP_CA_EXP")

  @@index([distribution_id], map: "FK_DIS_EXP_idx")
  @@index([expense_category_id], map: "FK_EXP_CA_EXP_idx")
}

model expense_category {
  id      Int       @id @default(autoincrement())
  type    String    @db.VarChar(30)
  expense expense[]
}

model note {
  id              Int           @id @default(autoincrement())
  description     String        @db.LongText
  distribution_id Int?
  customer_id     Int
  customer        customer      @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_CUS_NOT")
  distribution    distribution? @relation(fields: [distribution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_DIS_NOT")

  @@index([customer_id], map: "FK_CUS_NOT_idx")
  @@index([distribution_id], map: "FK_DIS_NOT_idx")
}

model order {
  id              Int          @id @default(autoincrement())
  amount          Int
  date            DateTime     @db.Date
  tape_type       String       @db.VarChar(15)
  update_at       DateTime     @default(now()) @db.Timestamp(0)
  delete_at       DateTime?    @db.Timestamp(0)
  customer_id     Int
  distribution_id Int
  customer        customer     @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_CUS_ORD")
  distribution    distribution @relation(fields: [distribution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_DIS_ORD")

  @@index([customer_id], map: "FK_CUS_ORD_idx")
  @@index([distribution_id], map: "FK_DIS_ORD_idx")
}

model product_inventory {
  id                    Int                     @id @default(autoincrement())
  product_name          String                  @db.VarChar(50)
  amount                Int
  is_container          Int                     @db.TinyInt
  update_at             DateTime                @default(now()) @db.Timestamp(0)
  delete_at             DateTime?               @db.Timestamp(0)
  distribution          distribution[]
  sale                  sale[]
  transaction_container transaction_container[]
}

model route {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(30)
  location     String         @db.VarChar(20)
  weekdays     String         @db.VarChar(100)
  price        Int
  update_at    DateTime       @default(now()) @db.Timestamp(0)
  delete_at    DateTime?      @db.Timestamp(0)
  customer     customer[]
  distribution distribution[]
}

model sale {
  id                   Int               @id @default(autoincrement())
  amount               Int
  unit_value           Int
  update_at            DateTime          @default(now()) @db.Timestamp(0)
  delete_at            DateTime?         @db.Timestamp(0)
  value_paid           Int               @default(0)
  customer_id          Int
  distribution_id      Int
  user_id              Int
  product_inventory_id Int
  customer             customer          @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_CUS_SAL")
  distribution         distribution      @relation(fields: [distribution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_DIS_SAL")
  product_inventory    product_inventory @relation(fields: [product_inventory_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_PRO_SAL")
  user                 user              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_USE_SAL")

  @@index([customer_id], map: "FK_CUS_SAL_idx")
  @@index([distribution_id], map: "FK_DIS_SAL_idx")
  @@index([product_inventory_id], map: "FK_PRO_SAL_idx")
  @@index([user_id], map: "FK_USE_SAL_idx")
}

model transaction_container {
  id                   Int                        @id @default(autoincrement())
  date                 DateTime                   @db.Date
  value                Int
  type                 transaction_container_type
  total                Int
  update_at            DateTime                   @default(now()) @db.Timestamp(0)
  delete_at            DateTime?                  @db.Timestamp(0)
  customer_id          Int
  user_id              Int
  product_inventroy_id Int
  customer             customer                   @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_CUS_TRA_CO")
  product_inventory    product_inventory          @relation(fields: [product_inventroy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_PRO_TRA_CO")
  user                 user                       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_USE_TRA_CO")

  @@index([customer_id], map: "FK_CUS_TRA_CO_idx")
  @@index([product_inventroy_id], map: "FK_PRO_TRA_CO_idx")
  @@index([user_id], map: "FK_USE_TRA_CO_idx")
}

model transaction_payment {
  id             Int                                 @id @default(autoincrement())
  date           DateTime                            @db.Date
  value          Int
  type           transaction_payment_type
  payment_method transaction_payment_payment_method? @default(EFECTIVO)
  total          Int?
  update_at      DateTime                            @default(now()) @db.Timestamp(0)
  delete_at      DateTime?                           @db.Timestamp(0)
  user_id        Int
  customer_id    Int
  customer       customer                            @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_CUS_TRA_PA")
  user           user                                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_USE_TRA_PA")

  @@index([user_id], map: "FK_USE_TRA_PA_idx")
  @@index([customer_id], map: "FK_CUS_TRA_PA")
}

model user {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(50)
  cellphone             String                  @db.VarChar(11)
  username              String?                 @unique(map: "username_UNIQUE") @db.VarChar(30)
  password              String                  @db.VarChar(200)
  roles                 String                  @db.VarChar(100)
  update_at             DateTime?               @default(now()) @db.Timestamp(0)
  delete_at             DateTime?               @db.Timestamp(0)
  distribution_user     distribution_user[]
  sale                  sale[]
  transaction_container transaction_container[]
  transaction_payment   transaction_payment[]
}

enum transaction_container_type {
  BORROWED
  RETURNED
}

enum transaction_payment_type {
  PAID
  SALE
  DEBT
}

enum customer_tape_preference {
  NORMAL
  SERVIFACIL
}

enum transaction_payment_payment_method {
  EFECTIVO
  NEQUI
  DAVIPLATA
}

enum distribution_status {
  PREORDER
  OPENED
  CLOSE_REQUEST
  CLOSED
}
